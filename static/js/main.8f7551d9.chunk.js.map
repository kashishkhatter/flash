{"version":3,"sources":["components/correct.png","components/incorrect.png","components/QuizCard.js","containers/Footer.js","pages/HomePage.js","components/Deck.js","containers/IconBar.js","components/EditCard.js","components/Card.js","containers/SideBar.js","InitialData/InitialDecks.js","App.js","reportWebVitals.js","index.js"],"names":["QuizCard","setQuestionNumber","setFinishTest","finishTest","setIsAnswered","points","setPoints","isCorrect","setIsCorrect","userAnswer","setUserAnswer","setKnowledgeTest","knowledgeTest","selectedDeck","questionNumber","cardSide","setCardSide","useState","content","cardContent","setCardContent","isLastQuestion","length","reset","useEffect","className","onClick","front","back","style","value","onChange","e","target","toLowerCase","checkUserAnswer","src","correct","alt","incorrect","Footer","window","localStorage","clear","HomePage","quizMode","knowItCards","setKnowItCards","dontKnowItCards","setDontKnowItCards","isFinished","setIsFinished","isAnswered","data","name","Deck","deck","removeDeck","setAddQuestionsView","setSelectedDeck","userDecks","setUserDecks","setQuizMode","deckTitle","setDeckTitle","changingName","setChangingName","type","event","filteredDecks","filter","userDeck","id","newDeckData","index","splice","IconBar","EditCard","currentCard","setEditCard","updateCard","cardNumber","cardFront","setCardFront","cardBack","setCardBack","frontSide","Card","deleteCard","editCard","SideBar","createNewDeck","addQuestionsView","addCard","map","i","initialDecks","App","getItem","JSON","parse","setItem","stringify","filteredCardList","card","newSelectedDeck","newDecks","updatedDeckList","newDeck","newCardList","updatedDeckData","newCardData","cardList","newSelectedDeckData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f7551d9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/correct.c6988b1a.png\";","export default __webpack_public_path__ + \"static/media/incorrect.c40b8bd7.png\";","import { useState, useEffect } from \"react\";\r\nimport { GiRapidshareArrow } from \"react-icons/gi\";\r\nimport correct from \"./correct.png\";\r\nimport incorrect from \"./incorrect.png\";\r\nimport \"./Card.css\";\r\n\r\nexport default function QuizCard({\r\n  setQuestionNumber,\r\n  setFinishTest,\r\n  finishTest,\r\n  setIsAnswered,\r\n  points,\r\n  setPoints,\r\n  isCorrect,\r\n  setIsCorrect,\r\n  userAnswer,\r\n  setUserAnswer,\r\n  setKnowledgeTest,\r\n  knowledgeTest,\r\n  selectedDeck,\r\n  questionNumber,\r\n  cardSide,\r\n  setCardSide,\r\n}) {\r\n  const [cardContent, setCardContent] = useState(\r\n    selectedDeck.content[questionNumber]\r\n  );\r\n\r\n  const checkUserAnswer = (userAnswer) => {\r\n    if (userAnswer.toLowerCase() === cardContent.back.toLowerCase()) {\r\n      setIsCorrect(\"true\");\r\n      setPoints(points + 10);\r\n    } else {\r\n      setIsCorrect(\"false\");\r\n    }\r\n    setIsAnswered(true);\r\n    isLastQuestion();\r\n  }\r\n\r\n  const isLastQuestion = () => {\r\n    if (questionNumber === selectedDeck.content.length - 1) {\r\n      setQuestionNumber(selectedDeck.content.length + 1)\r\n    }\r\n  }\r\n\r\n  const reset = () => {\r\n    setFinishTest(false)\r\n    setIsCorrect(\"null\")\r\n    setUserAnswer(\"\")\r\n    setPoints(0)\r\n    setQuestionNumber(0)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCardSide(\"front\");\r\n  }, [setCardSide]);\r\n\r\n  useEffect(() => {\r\n    setCardContent(selectedDeck.content[questionNumber]);\r\n  }, [cardContent, questionNumber, selectedDeck]);\r\n\r\n  const flipCard = () => {\r\n    cardSide === \"front\" ? setCardSide(\"back\") : setCardSide(\"front\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-card\">\r\n      <div className=\"quiz-card-top\">\r\n        {knowledgeTest === false && (<GiRapidshareArrow className=\"flip-card-button\" \r\n        onClick={flipCard} />)}\r\n      </div>\r\n      <div className=\"quiz-card-content\">\r\n        <>\r\n        {selectedDeck.content.length === 0 ? (\r\n          <p>Add questions to this deck to study</p>\r\n        ) : (\r\n          <div>\r\n            {cardSide === \"front\" ? (\r\n              <>\r\n              {isCorrect === \"null\" && finishTest === false && (<p>{cardContent?.front}</p>)}\r\n              </>\r\n            ) : (\r\n              <p>{cardContent.back}</p>\r\n            )}\r\n          </div>\r\n        )}\r\n        {knowledgeTest === true && (\r\n          <>\r\n          <div style={{'display': 'flex', 'flexDirection': 'column'}} className=\"test-mode\">\r\n          {isCorrect === \"null\" && finishTest === false && (\r\n          <>\r\n          <input className=\"selected-deck-title\" \r\n            style={{'marginBottom': '20px'}}\r\n            value={userAnswer}\r\n            onChange={(e) => setUserAnswer(e.target.value)}/>\r\n            <button className=\"buttonCards\" onClick={() => checkUserAnswer(userAnswer)}>\r\n            Check My Answer</button>\r\n          </>\r\n          )}\r\n          {isCorrect === \"true\" && (<img src={correct} className=\"result-icon\" alt=\"correct-icon\"/>)}\r\n          {isCorrect === \"false\" && (<img src={incorrect} className=\"result-icon\" alt=\"incorrect-icon\"/>)}\r\n          {finishTest === true && (\r\n          <div>\r\n            <h4>You Have finished this test! 🥳</h4>\r\n            <h5>Your final score is: {points}</h5>\r\n            <button onClick={reset} className=\"buttonCards\">Retake Test</button>\r\n          </div>)}\r\n            <button className=\"buttonCards\" onClick={() => {\r\n              reset();\r\n              setKnowledgeTest(false);\r\n              }}\r\n              >Go Back to Practice Mode</button>\r\n          </div>\r\n          </>\r\n        )}\r\n        </>\r\n      </div>\r\n      <div className=\"quiz-card-bottom\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  const clearLocalStorage = () => {\r\n    window.localStorage.clear();\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <button className=\"clear-storage-button\" onClick={clearLocalStorage}>\r\n        clear local storage\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport QuizCard from \"../components/QuizCard\";\r\nimport { BsCaretLeftFill, BsFillCaretRightFill } from \"react-icons/bs\";\r\nimport { FaRegSmileBeam, FaRegFrown } from \"react-icons/fa\";\r\nimport Footer from \"../containers/Footer\";\r\nimport \"./HomePage.css\";\r\n\r\nexport default function HomePage({\r\n  quizMode,\r\n  selectedDeck,\r\n  questionNumber,\r\n  setQuestionNumber,\r\n  cardSide,\r\n  setCardSide,\r\n  knowItCards,\r\n  setKnowItCards,\r\n  dontKnowItCards,\r\n  setDontKnowItCards,\r\n}) {\r\n  const [ isFinished, setIsFinished ] = useState(false);\r\n  const [ finishTest, setFinishTest ] = useState(false);\r\n  const [ isAnswered, setIsAnswered ] = useState(false);\r\n  const [knowledgeTest, setKnowledgeTest] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(\"null\");\r\n  const [userAnswer, setUserAnswer] = useState(\"\");\r\n  const [points, setPoints] = useState(0);\r\n  // Increments the question number to display the next card's front side\r\n  const incrementQuestionNumber = () => {\r\n    if (questionNumber < selectedDeck.content.length - 1) {\r\n      setIsFinished(false)\r\n      setQuestionNumber(questionNumber + 1);\r\n    } else {\r\n      setIsFinished(true);\r\n      setQuestionNumber(0);\r\n    }\r\n    setCardSide(\"front\");\r\n  };\r\n\r\n  const testModeIncrement = () => {\r\n    if (questionNumber < selectedDeck.content.length - 1 && isAnswered === true) {\r\n      setIsFinished(false)\r\n      setQuestionNumber(questionNumber + 1);\r\n    } else if (questionNumber > selectedDeck.content.length && isAnswered === true) {\r\n      setFinishTest(true);\r\n    }\r\n    setIsAnswered(false);\r\n    setCardSide(\"front\");\r\n    setUserAnswer(\"\");\r\n    setIsCorrect(\"null\");\r\n  }\r\n\r\n\r\n  // Decrements the question number to display the previous card's front side\r\n  const decrementQuestionNumber = () => {\r\n    if (questionNumber === 0) {\r\n      setQuestionNumber(selectedDeck.content.length - 1);\r\n    }\r\n    else {\r\n      setQuestionNumber(questionNumber - 1);\r\n    }\r\n    setCardSide(\"front\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div className=\"sidebar-block\"></div>\r\n      {quizMode === false ? (\r\n        <div className=\"no-quiz\">\r\n          <h1 className=\"home-page-title\">Home Page</h1>\r\n          <p>Select a deck to get started!</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {isFinished === false && knowledgeTest === false ? (\r\n          <div>\r\n          <h1 className=\"home-page-title\">Practice Time!</h1>\r\n          <h2 className=\"selected-deck-title\">{selectedDeck.data.name}</h2>\r\n          <h3 className=\"card-number\">{`${questionNumber + 1}/${\r\n            selectedDeck.content.length\r\n          }`}</h3>\r\n          </div>\r\n          ) : (\r\n          <>\r\n          {knowledgeTest === false && (\r\n            <div>\r\n            <h1 className=\"home-page-title\">Are you Ready for a Quiz?</h1>\r\n            <div className=\"selected-deck-title\">\r\n              <button className=\"buttonCards\" onClick={() => setKnowledgeTest(true)}>I was born Ready!</button>\r\n            </div>\r\n            </div>\r\n            )}\r\n          </>\r\n          )}\r\n          {knowledgeTest === true && (\r\n            <div>\r\n            <h1 className=\"home-page-title test-title\">Next Einstein?</h1>\r\n            <h3 className=\"card-number\">Score: {points}</h3>\r\n            </div>\r\n          )}\r\n          <div className=\"quiz-section\">\r\n          {knowledgeTest === false && (\r\n            <BsCaretLeftFill\r\n              className=\"change-question-button\"\r\n              onClick={decrementQuestionNumber}\r\n            />)}\r\n            <QuizCard\r\n              setQuestionNumber={setQuestionNumber}\r\n              finishTest={finishTest}\r\n              setFinishTest={setFinishTest}\r\n              isFinished={isFinished}\r\n              setIsFinished={setIsFinished}\r\n              isAnswered={isAnswered}\r\n              setIsAnswered={setIsAnswered}\r\n              points={points}\r\n              setPoints={setPoints}\r\n              isCorrect={isCorrect}\r\n              setIsCorrect={setIsCorrect}\r\n              userAnswer={userAnswer}\r\n              setUserAnswer={setUserAnswer}\r\n              setKnowledgeTest={setKnowledgeTest}\r\n              knowledgeTest={knowledgeTest}\r\n              selectedDeck={selectedDeck}\r\n              questionNumber={questionNumber}\r\n              cardSide={cardSide}\r\n              setCardSide={setCardSide}\r\n            />\r\n            {knowledgeTest === false ? (\r\n            <BsFillCaretRightFill\r\n              className=\"change-question-button\"\r\n              onClick={incrementQuestionNumber}\r\n            />) : (\r\n              <BsFillCaretRightFill\r\n              className=\"change-question-button\"\r\n              onClick={testModeIncrement}\r\n            />\r\n            )}\r\n          </div>\r\n          {knowledgeTest === false && (\r\n          <div className=\"know-it-button-section\">\r\n            <button\r\n              className=\"know-it-button buttonCards\"\r\n              onClick={() =>\r\n                setKnowItCards([\r\n                  ...knowItCards,\r\n                  selectedDeck.content[questionNumber],\r\n                ])\r\n              }\r\n            >\r\n              <FaRegSmileBeam />I know it\r\n            </button>\r\n            <button\r\n              className=\"know-it-button buttonCards\"\r\n              onClick={() =>\r\n                setDontKnowItCards([\r\n                  ...dontKnowItCards,\r\n                  selectedDeck.content[questionNumber],\r\n                ])\r\n              }\r\n            >\r\n              <FaRegFrown />I don't know it\r\n            </button>\r\n          </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\n","import { useState } from \"react\";\r\nimport { GoTrashcan } from \"react-icons/go\";\r\nimport { BsBoxArrowInRight } from \"react-icons/bs\";\r\nimport \"./Deck.css\";\r\n\r\nexport default function Deck({\r\n  deck,\r\n  removeDeck,\r\n  setAddQuestionsView,\r\n  setSelectedDeck,\r\n  userDecks,\r\n  setUserDecks,\r\n  setQuizMode,\r\n  setQuestionNumber,\r\n  setCardSide,\r\n}) {\r\n  const [deckTitle, setDeckTitle] = useState(deck.data.name);\r\n  const [changingName, setChangingName] = useState(false);\r\n\r\n  //sets ability to edit deck title\r\n  const changeDeckName = () => {\r\n    setChangingName(true);\r\n  };\r\n\r\n  //changes the current deck title\r\n  const titleChange = (event) => {\r\n    setDeckTitle(event.target.value);\r\n  };\r\n\r\n  //handles title submit and updates state of userDecks\r\n  const titleSubmit = () => {\r\n    setChangingName(false);\r\n    const filteredDecks = userDecks.filter(\r\n      (userDeck) => userDeck.id !== deck.id\r\n    );\r\n    const newDeckData = {\r\n      id: deck.id,\r\n      data: { name: deckTitle },\r\n      content: deck.content,\r\n    };\r\n    const index = newDeckData.id;\r\n    filteredDecks.splice(index, 0, newDeckData);\r\n    setUserDecks(filteredDecks);\r\n  };\r\n\r\n  return (\r\n    <div className=\"deck\" key={`deck ${deck.id}`}>\r\n      {changingName === false ? (\r\n        <p onClick={changeDeckName} className=\"deck-title\">\r\n          {deckTitle}\r\n        </p>\r\n      ) : (\r\n        <div className=\"edit-deck\">\r\n          <input\r\n            className=\"edit-deck-name\"\r\n            type=\"text\"\r\n            value={deckTitle}\r\n            onChange={titleChange}\r\n          ></input>\r\n          <button className=\"save-deck\" onClick={titleSubmit} type=\"submit\">\r\n            Save\r\n          </button>\r\n        </div>\r\n      )}\r\n      <p\r\n        className=\"add-cards-button\"\r\n        onClick={() => {\r\n          setCardSide(\"front\");\r\n          setSelectedDeck(deck);\r\n          setAddQuestionsView(true);\r\n        }}\r\n      >\r\n        Add cards\r\n      </p>\r\n\r\n      <div className=\"deck-buttons\">\r\n        <GoTrashcan\r\n          className=\"remove-deck-button\"\r\n          onClick={() => {\r\n            removeDeck(deck);\r\n            setQuizMode(false);\r\n          }}\r\n        />\r\n        <BsBoxArrowInRight\r\n          className=\"view-deck-button\"\r\n          onClick={() => {\r\n            setQuestionNumber(0);\r\n            setCardSide(\"front\");\r\n            setSelectedDeck(deck);\r\n            setQuizMode(true);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { RiMenuLine, RiHome4Line, RiBook2Line } from \"react-icons/ri\";\r\nimport { GiMagnifyingGlass, GiStack } from \"react-icons/gi\";\r\nimport { ImLab } from \"react-icons/im\";\r\nimport { HiPhotograph } from \"react-icons/hi\";\r\n\r\nexport default function IconBar({ setQuizMode, setAddQuestionsView }) {\r\n  return (\r\n    <div className=\"sidebar-icon-bar\">\r\n      <RiHome4Line\r\n        className=\"sidebar-icon\"\r\n        onClick={() => {\r\n          setQuizMode(false);\r\n          setAddQuestionsView(false);\r\n        }}\r\n      />\r\n      <RiMenuLine className=\"sidebar-icon\" />\r\n      <GiMagnifyingGlass className=\"sidebar-icon\" />\r\n      <RiBook2Line className=\"sidebar-icon\" />\r\n      <ImLab className=\"sidebar-icon\" />\r\n      <HiPhotograph className=\"sidebar-icon\" />\r\n      <GiStack className=\"sidebar-icon\" />\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { MdSwapVert } from \"react-icons/md\";\r\nimport \"./Card.css\";\r\n\r\nexport default function EditCard({\r\n  currentCard,\r\n  setEditCard,\r\n  updateCard,\r\n  cardNumber,\r\n}) {\r\n  const [cardFront, setCardFront] = useState(currentCard.front);\r\n  const [cardBack, setCardBack] = useState(currentCard.back);\r\n\r\n  // switches card front and card back\r\n  const swapCardSides = () => {\r\n    const frontSide = cardFront;\r\n    setCardFront(cardBack);\r\n    setCardBack(frontSide);\r\n  };\r\n\r\n  return (\r\n    <div className=\"small-card\">\r\n      <div className=\"small-card-front\">\r\n        <p className=\"edit-card-side-choice\">Front</p>\r\n        <input\r\n          className=\"edit-card-input\"\r\n          type=\"text\"\r\n          value={cardFront}\r\n          onChange={(e) => setCardFront(e.target.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"edit-card-center\">\r\n        <div className=\"edit-card-separator\"></div>\r\n        <MdSwapVert className=\"swap-button\" onClick={swapCardSides} />\r\n        <div className=\"edit-card-separator\"></div>\r\n      </div>\r\n\r\n      <div className=\"small-card-back\">\r\n        <p className=\"edit-card-side-choice\">Back</p>\r\n        <input\r\n          className=\"edit-card-input\"\r\n          type=\"text\"\r\n          value={cardBack}\r\n          onChange={(e) => setCardBack(e.target.value)}\r\n        ></input>\r\n      </div>\r\n      <div className=\"edit-card-buttons\">\r\n        <button onClick={() => setEditCard(false)}>Cancel</button>\r\n        <button\r\n          onClick={() => {\r\n            setEditCard(false);\r\n            updateCard(cardNumber, cardFront, cardBack);\r\n          }}\r\n        >\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { GoTrashcan } from \"react-icons/go\";\r\nimport { GrEdit } from \"react-icons/gr\";\r\nimport EditCard from \"./EditCard\";\r\nimport \"./Card.css\";\r\n\r\nexport default function Card({\r\n  currentCard,\r\n  cardNumber,\r\n  deleteCard,\r\n  updateCard,\r\n  setCardSide,\r\n}) {\r\n  const [editCard, setEditCard] = useState(false);\r\n\r\n  // toggles card view or card edit mode\r\n  const editToggle = () => {\r\n    setEditCard(!editCard);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-section\">\r\n      {editCard === false ? (\r\n        <div className=\"small-card\">\r\n          <div className=\"small-card-buttons\">\r\n            <GrEdit className=\"edit-button\" onClick={editToggle} />\r\n            <GoTrashcan\r\n              className=\"delete-button\"\r\n              onClick={() => {\r\n                setCardSide(\"front\");\r\n                deleteCard(currentCard);\r\n              }}\r\n            />\r\n          </div>\r\n          <p>{currentCard.front}</p>\r\n        </div>\r\n      ) : (\r\n        <EditCard\r\n          currentCard={currentCard}\r\n          setEditCard={setEditCard}\r\n          updateCard={updateCard}\r\n          cardNumber={cardNumber}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { AiFillPlayCircle } from \"react-icons/ai\";\r\nimport { HiPlusCircle, HiStop } from \"react-icons/hi\";\r\nimport Deck from \"../components/Deck\";\r\nimport IconBar from \"./IconBar\";\r\nimport Card from \"../components/Card\";\r\nimport \"./SideBar.css\";\r\n\r\nexport default function SideBar({\r\n  userDecks,\r\n  createNewDeck,\r\n  removeDeck,\r\n  addQuestionsView,\r\n  setAddQuestionsView,\r\n  selectedDeck,\r\n  setSelectedDeck,\r\n  setUserDecks,\r\n  addCard,\r\n  quizMode,\r\n  setQuizMode,\r\n  questionNumber,\r\n  setQuestionNumber,\r\n  cardSide,\r\n  setCardSide,\r\n  deleteCard,\r\n  updateCard,\r\n}) {\r\n  return (\r\n    <div>\r\n      {addQuestionsView === false ? (\r\n        <div className=\"sidebar\">\r\n          <div className=\"sidebar-header\">\r\n            <IconBar\r\n              setQuizMode={setQuizMode}\r\n              setAddQuestionsView={setAddQuestionsView}\r\n            />\r\n            <h1 className=\"sidebar-title\">Flashcards</h1>\r\n            <HiPlusCircle className=\"add-deck-button\" onClick={createNewDeck} />\r\n          </div>\r\n          <div className=\"separator\"></div>\r\n          {userDecks.map((userDeck, i) => (\r\n            <Deck\r\n              key={`deck ${i}`}\r\n              deck={userDeck}\r\n              removeDeck={removeDeck}\r\n              setAddQuestionsView={setAddQuestionsView}\r\n              setSelectedDeck={setSelectedDeck}\r\n              userDecks={userDecks}\r\n              setUserDecks={setUserDecks}\r\n              setQuizMode={setQuizMode}\r\n              setQuestionNumber={setQuestionNumber}\r\n              setCardSide={setCardSide}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"sidebar\">\r\n          <div className=\"sidebar-header\">\r\n            <IconBar\r\n              setQuizMode={setQuizMode}\r\n              setAddQuestionsView={setAddQuestionsView}\r\n            />\r\n            <h1 className=\"sidebar-title\">{selectedDeck.data.name}</h1>\r\n            <div className=\"deck-data\">\r\n              <p className=\"deck-length\">{selectedDeck.content.length} cards</p>\r\n              {quizMode === false ? (\r\n                <AiFillPlayCircle\r\n                  className=\"deck-button\"\r\n                  onClick={() => setQuizMode(!quizMode)}\r\n                />\r\n              ) : (\r\n                <HiStop\r\n                  className=\"deck-button\"\r\n                  onClick={() => setQuizMode(!quizMode)}\r\n                />\r\n              )}\r\n              <HiPlusCircle className=\"deck-button\" onClick={addCard} />\r\n            </div>\r\n          </div>\r\n          <div className=\"separator\"></div>\r\n          {selectedDeck\r\n            ? selectedDeck.content.map((currentCard, i) => (\r\n                <Card\r\n                  key={i}\r\n                  currentCard={currentCard}\r\n                  cardNumber={i}\r\n                  deleteCard={deleteCard}\r\n                  updateCard={updateCard}\r\n                  setCardSide={setCardSide}\r\n                />\r\n              ))\r\n            : null}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","export const initialDecks = [\r\n  {\r\n    id: 0,\r\n    data: { name: \"I'm no math magician or anything\" },\r\n    content: [\r\n      { front: \"2+2\", back: \"4\" },\r\n      {\r\n        front: \"What is the pythagorean theorem?\",\r\n        back: \"Sounds like it's just a theory to me!\",\r\n      },\r\n      {\r\n        front: \"What is math?\",\r\n        back: \"Well that's just like, your opinion, man.\",\r\n      },\r\n      {\r\n        front:\r\n          \"How many flaps per second for a 5 ounce swallow to carry a 1 pound coconut?\",\r\n        back: \"An african swallow, or a European swallow?! \",\r\n      },\r\n    ],\r\n  },\r\n  // {\r\n  //   id: 1,\r\n  //   data: { name: \"Philosophology\" },\r\n  //   content: [\r\n  //     {\r\n  //       front: \"What is the meaning of life?\",\r\n  //       back: \"..that's up for you to decide!\",\r\n  //     },\r\n  //     {\r\n  //       front: \"Who is Rene Descartes?\",\r\n  //       back: \"The first 'modern' philosopher\",\r\n  //     },\r\n  //   ],\r\n  // },\r\n];\r\n","import { useState, useEffect } from \"react\";\r\nimport HomePage from \"./pages/HomePage\";\r\nimport SideBar from \"./containers/SideBar\";\r\nimport { initialDecks } from \"./InitialData/InitialDecks\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [userDecks, setUserDecks] = useState([]);\r\n  const [selectedDeck, setSelectedDeck] = useState({});\r\n  const [addQuestionsView, setAddQuestionsView] = useState(false);\r\n  const [quizMode, setQuizMode] = useState(false);\r\n  const [questionNumber, setQuestionNumber] = useState(0);\r\n  const [cardSide, setCardSide] = useState(\"front\");\r\n  const [knowItCards, setKnowItCards] = useState([]);\r\n  const [dontKnowItCards, setDontKnowItCards] = useState([]);\r\n\r\n  // retrieves persisted decks through local storage\r\n  useEffect(() => {\r\n    const data = localStorage.getItem(\"deck-list\");\r\n    if (data) {\r\n      setUserDecks(JSON.parse(data));\r\n    } else {\r\n      setUserDecks(initialDecks);\r\n    }\r\n  }, []);\r\n\r\n  // persists decks to local storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"deck-list\", JSON.stringify(userDecks));\r\n  });\r\n\r\n  //creates a new deck and adds it to the user deck list state: userDecks\r\n  const createNewDeck = () => {\r\n    const newDeck = {\r\n      id: userDecks.length,\r\n      data: { name: \"Click title area to name your new deck\" },\r\n      content: [],\r\n    };\r\n    setUserDecks([...userDecks, newDeck]);\r\n  };\r\n\r\n  // Creates a new card, and adds it to the selected deck\r\n  const addCard = () => {\r\n    const newCard = { front: \"Front Side\", back: \"Back Side\" };\r\n    const newCardList = [...selectedDeck.content, newCard];\r\n    const index = selectedDeck.id;\r\n\r\n    const updatedDeckData = {\r\n      id: index,\r\n      data: selectedDeck.data,\r\n      content: newCardList,\r\n    };\r\n\r\n    setSelectedDeck(updatedDeckData);\r\n\r\n    const newDecks = [...userDecks];\r\n\r\n    newDecks\r\n      .filter((deck) => deck.id !== selectedDeck.id)\r\n      .splice(index, 1, updatedDeckData);\r\n\r\n    setUserDecks(newDecks);\r\n  };\r\n\r\n  // Removes the selected card from the selected deck\r\n  const deleteCard = (currentCard) => {\r\n    const filteredCardList = selectedDeck.content.filter(\r\n      (card) => card.front !== currentCard.front\r\n    );\r\n    userDecks.filter((deck) => deck.id !== selectedDeck.id);\r\n\r\n    const newSelectedDeck = {\r\n      id: selectedDeck.id,\r\n      data: selectedDeck.data,\r\n      content: filteredCardList,\r\n    };\r\n    setSelectedDeck(newSelectedDeck);\r\n\r\n    const newDecks = [...userDecks];\r\n    newDecks.splice(selectedDeck.id, 1, newSelectedDeck);\r\n\r\n    setUserDecks(newDecks);\r\n  };\r\n\r\n  //Updates the selected card to user inputs\r\n  const updateCard = (index, front, back) => {\r\n    const newCardData = { front: front, back: back };\r\n\r\n    const cardList = [...selectedDeck.content];\r\n    cardList.splice(index, 1, newCardData);\r\n\r\n    const newSelectedDeckData = {\r\n      id: selectedDeck.id,\r\n      data: selectedDeck.data,\r\n      content: cardList,\r\n    };\r\n    setSelectedDeck(newSelectedDeckData);\r\n\r\n    const newDecks = [...userDecks];\r\n\r\n    newDecks.splice(selectedDeck.id, 1, newSelectedDeckData);\r\n\r\n    setUserDecks(newDecks);\r\n  };\r\n\r\n  // Removes the selected deck from deck list state: userDecks\r\n  const removeDeck = (deck) => {\r\n    const updatedDeckList = [...userDecks];\r\n    updatedDeckList.splice(deck.id, 1);\r\n    setUserDecks(updatedDeckList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SideBar\r\n        userDecks={userDecks}\r\n        setUserDecks={setUserDecks}\r\n        removeDeck={removeDeck}\r\n        createNewDeck={createNewDeck}\r\n        addQuestionsView={addQuestionsView}\r\n        setAddQuestionsView={setAddQuestionsView}\r\n        selectedDeck={selectedDeck}\r\n        setSelectedDeck={setSelectedDeck}\r\n        addCard={addCard}\r\n        quizMode={quizMode}\r\n        setQuizMode={setQuizMode}\r\n        questionNumber={questionNumber}\r\n        setQuestionNumber={setQuestionNumber}\r\n        cardSide={cardSide}\r\n        setCardSide={setCardSide}\r\n        deleteCard={deleteCard}\r\n        updateCard={updateCard}\r\n      />\r\n      <HomePage\r\n        userDecks={userDecks}\r\n        setUserDecks={setUserDecks}\r\n        quizMode={quizMode}\r\n        setQuizMode={setQuizMode}\r\n        selectedDeck={selectedDeck}\r\n        questionNumber={questionNumber}\r\n        setQuestionNumber={setQuestionNumber}\r\n        cardSide={cardSide}\r\n        setCardSide={setCardSide}\r\n        deleteCard={deleteCard}\r\n        knowItCards={knowItCards}\r\n        setKnowItCards={setKnowItCards}\r\n        dontKnowItCards={dontKnowItCards}\r\n        setDontKnowItCards={setDontKnowItCards}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}